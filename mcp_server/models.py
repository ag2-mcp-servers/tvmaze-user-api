# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:48:29+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint


class BulkResponseItem(BaseModel):
    code: Optional[int] = Field(
        None, description='The HTTP code that corresponds to this item'
    )
    errors: Optional[Dict[str, Any]] = Field(
        None, description='A list of validation errors for this item (in case of error)'
    )
    input: Optional[Dict[str, Any]] = Field(
        None,
        description='The request data that belonged to this response (in case of error)',
    )
    message: Optional[str] = Field(
        None, description='A human-readable error message (in case of error)'
    )
    result: Optional[Dict[str, Any]] = Field(
        None, description='The resulting created/updated object (in case of success)'
    )


class BulkResponse(RootModel[List[BulkResponseItem]]):
    root: List[BulkResponseItem] = Field(
        ...,
        description='A list of responses to your bulk input, ordered the same as your input',
    )


class Episode(BaseModel):
    pass


class EpisodeVote(BaseModel):
    episode_id: Optional[int] = None
    vote: Optional[conint(ge=1, le=10)] = Field(None, description='The vote number')
    voted_at: Optional[int] = Field(
        None, description='Epoch timestamp for when the user voted for the episode'
    )


class MarkType(RootModel[Any]):
    root: Any = Field(..., description='0 for watched, 1 for acquired, 2 for skipped')


class FieldEmbedded(BaseModel):
    episode: Optional[Episode] = None


class MarkedEpisode(BaseModel):
    field_embedded: Optional[FieldEmbedded] = Field(None, alias='_embedded')
    episode_id: Optional[int] = None
    marked_at: Optional[int] = Field(
        None,
        description='Epoch timestamp for when the user watched the episode, or 0 for unknown.',
    )
    type: Optional[MarkType] = None


class Network(BaseModel):
    pass


class FieldEmbedded1(BaseModel):
    network: Optional[Network] = None


class NetworkFollow(BaseModel):
    field_embedded: Optional[FieldEmbedded1] = Field(None, alias='_embedded')
    network_id: Optional[int] = None


class Person(BaseModel):
    pass


class FieldEmbedded2(BaseModel):
    person: Optional[Person] = None


class PersonFollow(BaseModel):
    field_embedded: Optional[FieldEmbedded2] = Field(None, alias='_embedded')
    person_id: Optional[int] = None


class Show(BaseModel):
    pass


class FieldEmbedded3(BaseModel):
    show: Optional[Show] = None


class ShowFollow(BaseModel):
    field_embedded: Optional[FieldEmbedded3] = Field(None, alias='_embedded')
    show_id: Optional[int] = None


class ShowVote(BaseModel):
    show_id: Optional[int] = None
    vote: Optional[conint(ge=1, le=10)] = Field(None, description='The vote number')
    voted_at: Optional[int] = Field(
        None, description='Epoch timestamp for when the user voted for the episode'
    )


class Tag(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None


class TagInstance(BaseModel):
    field_embedded: Optional[FieldEmbedded3] = Field(None, alias='_embedded')
    show_id: Optional[int] = None


class Webchannel(BaseModel):
    pass


class FieldEmbedded5(BaseModel):
    webchannel: Optional[Webchannel] = None


class WebchannelFollow(BaseModel):
    field_embedded: Optional[FieldEmbedded5] = Field(None, alias='_embedded')
    webchannel_id: Optional[int] = None


class AuthPollPostRequest(BaseModel):
    token: Optional[str] = None


class AuthPollPostResponse(BaseModel):
    apikey: Optional[str] = Field(None, description="The user's API key")
    username: Optional[str] = Field(None, description="The user's username")


class AuthStartPostRequest(BaseModel):
    email: Optional[str] = Field(None, description="The user's email address")
    email_confirmation: Optional[bool] = Field(
        True, description='Whether to email the user a confirmation link'
    )


class AuthStartPostResponse(BaseModel):
    confirm_url: Optional[str] = Field(
        None, description='URL where the user can confirm the authentication request'
    )
    token: Optional[str] = Field(
        None, description='Authentication token to use in the `poll` endpoint'
    )


class AuthValidateGetResponse(BaseModel):
    premium: Optional[int] = Field(
        None,
        description="The user's premium level; 1 for Bronze, 2 for Silver, 3 for Gold; or 0 for none",
    )


class ScrobbleEpisodesPostRequestItem(BaseModel):
    episode_id: Optional[int] = Field(None, description='The TVmaze episode ID')
    marked_at: Optional[int] = Field(
        None,
        description='Epoch timestamp for when the user watched the episode, or 0 for unknown.',
    )
    type: Optional[MarkType] = None


class ScrobbleEpisodesPostRequest(RootModel[List[ScrobbleEpisodesPostRequestItem]]):
    root: List[ScrobbleEpisodesPostRequestItem]


class ScrobbleShowsPostRequestItem(BaseModel):
    airdate: Optional[date] = Field(None, description='The episode airdate')
    episode: Optional[int] = Field(None, description='The episode number')
    marked_at: Optional[int] = Field(
        None,
        description='Epoch timestamp for when the user watched the episode, or 0 for unknown.',
    )
    season: Optional[int] = Field(None, description='The season number')
    type: Optional[MarkType] = None


class ScrobbleShowsPostRequest(RootModel[List[ScrobbleShowsPostRequestItem]]):
    root: List[ScrobbleShowsPostRequestItem]


class Embed(Enum):
    episode = 'episode'


class ScrobbleShowsShowIdGetResponse(RootModel[List[MarkedEpisode]]):
    root: List[MarkedEpisode]


class UserEpisodesGetResponse(RootModel[List[MarkedEpisode]]):
    root: List[MarkedEpisode]


class Embed2(Enum):
    network = 'network'


class UserFollowsNetworksGetResponse(RootModel[List[NetworkFollow]]):
    root: List[NetworkFollow]


class Embed4(Enum):
    person = 'person'


class UserFollowsPeopleGetResponse(RootModel[List[PersonFollow]]):
    root: List[PersonFollow]


class Embed6(Enum):
    show = 'show'


class UserFollowsShowsGetResponse(RootModel[List[ShowFollow]]):
    root: List[ShowFollow]


class Embed8(Enum):
    webchannel = 'webchannel'


class UserFollowsWebchannelsGetResponse(RootModel[List[WebchannelFollow]]):
    root: List[WebchannelFollow]


class UserTagsGetResponse(RootModel[List[Tag]]):
    root: List[Tag]


class Embed10(Enum):
    show = 'show'


class UserTagsTagIdShowsGetResponse(RootModel[List[TagInstance]]):
    root: List[TagInstance]


class UserVotesEpisodesGetResponse(RootModel[List[EpisodeVote]]):
    root: List[EpisodeVote]


class UserVotesShowsGetResponse(RootModel[List[ShowVote]]):
    root: List[ShowVote]
